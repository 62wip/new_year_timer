from datetime import datetime, timedelta

from aiogram import Router, Bot
from aiogram.types import Message
import aioschedule
import asyncio

from config import TG_ID, TZ
import app.tools as tools


async def send_day_to_new_year(bot: Bot):
    now_time = datetime.now(TZ)
    time_to_newyear = tools.time_to_newyear(now_time)
    if now_time.month == 12 or now_time.month == 1:
        if now_time.day == 1 and now_time.month == 12:
            answer_text = f'''<b>–í–æ—Ç –∏ –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å –∑–∏–º—ã</b>
<b>–ß–µ—Ä–µ–∑ <u>31 –¥–µ–Ω—å</u> –Ω–∞—Å—Ç—É–ø–∏—Ç –¥–æ–ª–≥–æ–∂–¥–∞–Ω–Ω—ã–π –ø—Ä–∞–∑–¥–Ω–∏–∫</b>
<i>–° –Ω–∞—Å—Ç—É–ø–∞—é—â–∏–º</i> üßä‚ùÑÔ∏è‚õ∏Ô∏è'''
        elif now_time.day == 9 and now_time.month == 12:
            answer_text = f'–° –ù–ì'
        else:
            answer_text = f'<b>–£—Ö—Ö—Ö, –Ω–æ–≤—ã–π –≥–æ–¥ –≤—Å–µ –±–ª–∏–∂–µ –∏ –±–ª–∏–∂–µ ‚ùÑÔ∏è\n{tools.text_stay_to(time_to_newyear + timedelta(days=1))} <u>{time_to_newyear.days + 1} {tools.text_day_to(time_to_newyear + timedelta(days=1))}</u></b>'
        for i in await tools.chat_id_for_mail():
            try:
                await bot.send_message(i, answer_text, parse_mode="HTML")
            except:
                continue

async def scheduler(bot: Bot):
    aioschedule.every().day.at('00:00').do(send_day_to_new_year, bot=bot)
    while True:
        await aioschedule.run_pending()
        await asyncio.sleep(10)