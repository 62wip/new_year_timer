from datetime import datetime

from typing import Any
from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery 
from aiogram.filters import Filter, Command

import app.keyboards as kb
import app.tools as tools
from app.jsons import * 
from config import TG_ID, TZ


router = Router()
data_chat_id = {}

@router.message(Command('start'))
async def start_command(message: Message) -> None:
    await tools.check_data_json(message.chat.id)
    now_time = datetime.now(TZ)
    if now_time.month == 12:
        answer_text = f'''<b>–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è, <u>–º–æ–π –ª—é–±–∏—Ç–µ–ª—å –∑–∏–º–Ω–µ–π –ø–æ—Ä—ã!</u> ‚ùÑÔ∏è

–î–æ –Ω–æ–≤–æ–≥–æ –≥–æ–¥–∞ –æ—Å—Ç–∞–ª–∏—Å—å —Å—á–∏—Ç–∞–Ω–Ω—ã–µ –¥–Ω–∏ üåé

<i>–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /timer, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Ç–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é</i> üßä

–° –Ω–∞—Å—Ç—É–ø–∞—é—â–∏–º, <i>{message.from_user.first_name}</i></b> üéÅ'''
    else:
        time_to_newyear = tools.time_to_newyear(now_time)
        answer_text = f'''<b>–°–ª—É—à–∞–π,<u> –¥–æ –Ω–æ–≤–æ–≥–æ –≥–æ–¥–∞ –µ—â–µ {time_to_newyear.days} {tools.text_day_to(time_to_newyear)}</u>üéÖüèª
<i>–ü—Ä–∏—Ö–æ–¥–∏ –≤ –¥–µ–∫–∞–±—Ä–µ<i>. –£–≤–∏–¥–∏–º—Å—è</b> üéÄ'''
    await message.reply(answer_text, parse_mode="HTML")

@router.message(Command('timer'))
async def timer_command(message: Message) -> None:
    await tools.check_data_json(message.chat.id)
    now_time = datetime.now(TZ)
    time_to_newyear = tools.time_to_newyear(now_time)
    if now_time.month == 12:
        answer_text = f'''<b>–ù–æ–≤—ã–π –≥–æ–¥ –Ω–∞—Å—Ç—É–ø–∏—Ç —á–µ—Ä–µ–∑ \n<u>{time_to_newyear.days} {tools.text_day_to(time_to_newyear)} {time_to_newyear.seconds // 3600} {tools.text_hour_to(time_to_newyear)} {time_to_newyear.seconds%3600//60} {tools.text_min_to(time_to_newyear)} {time_to_newyear.seconds%3600%60} {tools.text_sec_to(time_to_newyear)}</u>ü•≥
C –Ω–∞—Å—Ç—É–ø–∞—é—â–∏–º, {message.from_user.first_name} üíù</b>'''
    elif now_time.month == 11:
        answer_text = f'''<b>–ù–æ–≤—ã–π –≥–æ–¥ –Ω–∞—Å—Ç—É–ø–∏—Ç —á–µ—Ä–µ–∑ \n<u>{time_to_newyear.days} {tools.text_day_to(time_to_newyear)} {time_to_newyear.seconds // 3600} {tools.text_hour_to(time_to_newyear)}</u>ü•≥
–ü–æ–¥–æ–∂–¥–∏ –º–∞–ª–æ—Å—Ç—å, –¥–∞ –Ω–∞—Å—Ç—É–ø–∏—Ç –ø—Ä–∞–∑–¥–Ω–∏–∫ üíù</b>'''
    else:
        answer_text = f''' <b>–ù–æ–≤—ã–π –≥–æ–¥ –Ω–∞—Å—Ç—É–ø–∏—Ç —á–µ—Ä–µ–∑ \n<u>{time_to_newyear.days} {tools.text_day_to(time_to_newyear)}</u></b> üíî'''
    await message.reply(answer_text, parse_mode="HTML")

@router.message(Command('notification'))
async def notification_command(message: Message) -> None:
    await tools.check_data_json(message.chat.id)
    await message.reply('–í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å <u>—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ 00:00</u>? üåå</b>', parse_mode="HTML", reply_markup=await kb.set_notification_func(message.from_user.id))
    data_chat_id[message.from_user.id] = message.chat.id